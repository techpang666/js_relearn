
/**
 * @description 变量(variable)
 */

/*

实际开发因为数据是动态变化的 不能写死数据 需要使用变量来进行保存

变量是内存中用来保存数据的一块空间

变量的作用是在内存中存储数据

声明变量
let 变量名

赋值
变量名 = 值

取值
直接写变量名即可

实际开发都是使用let 很少使用var

*/

let age = prompt('请输入你的年龄')
console.log(age)

let a /* 关键字作用是在内存中开辟一个空间 空间名叫a */
a = 10 /* 将数据赋值给a */
console.log(a) /* 变量取值 打印a */
console.log('a') /* 这是打印字符串 不是变量a */

let num = 10 /* 变量初始化 */
num = 99 /* 重新赋值(销毁旧值/存入新值) */
console.log(num)

let a, b, c /* 可以批量声明 */

let a = 10, b = 10, c = 10 /* 可以批量声明赋值 */

let n1 = 20
let n2 = n1 /* 拷贝n1的数据给n2 */
let n2 = 'n1' /* 打印的是n1 不是n1的值 */
console.log(n1)
console.log(n2)

var n2 = 20 /* 这样才可以重复声明(覆盖已经存在的变量) let会报错 */
var n2 = 10 /* 第二个n2会重新开辟内存 第一个会被干掉(浪费内存) */

/**
 * @description 变量命名规则与规范
 */

/*

必须要遵守 否则会报错

规则是由语法决定的 无法更改

变量只能以下划线/字母/$开头 后面接任意的数字/下划线/字母/$

不能以关键字作为变量名

尽量不要使用关键字和保留字作为变量名

关键字 内置的一些关键字 代表着特殊的语法含义 不允许程序员擅自声明

保留字 有可能在将来会成为关键字 现在可以用 但是并不能保证以后一直可以用

严格区分大小写 age/Age两个不同的变量名

规范是程序员的一种编码习惯 程序员们在遵守规则时养成的一种习惯 主要目的就是为了提高代码的易读性

起名要有意义 最好用名词作为变量名

使用驼峰命名法 变量名第一个单词首字母小写 后面如果有其他单词 则每一个单词的首字母大写

*/

/**
 * @description 交换变量
 */

let n1 = 10
let n2 = 20
console.log(n1)
console.log(n2)

let temp = n1
n1 = n2 /* 不能直接替换 会将n1的值销毁掉 */
n2 = temp

console.log(n1)
console.log(n2)
